pragma solidity ^0.5.0;

library LibSet_TYPE_VALUE
{
	struct set
	{
		TYPE_VALUE[] values;
		mapping(TYPE_VALUE => uint256) indexes;
	}

	function length(set storage _set)
	internal view returns (uint256)
	{
		return _set.values.length;
	}

	function at(set storage _set, uint256 _index)
	internal view returns (TYPE_VALUE)
	{
		return _set.values[_index - 1];
	}

	function indexOf(set storage _set, TYPE_VALUE _value)
	internal view returns (uint256)
	{
		return _set.indexes[_value];
	}

	function contains(set storage _set, TYPE_VALUE _value)
	internal view returns (bool)
	{
		return indexOf(_set, _value) != 0;
	}

	function content(set storage _set)
	internal view returns (TYPE_VALUE[] memory)
	{
		return _set.values;
	}

	function add(set storage _set, TYPE_VALUE _value)
	internal returns (bool)
	{
		if (contains(_set, _value))
		{
			return false;
		}
		_set.indexes[_value] = _set.values.push(_value);
		return true;
	}

	function remove(set storage _set, TYPE_VALUE _value)
	internal returns (bool)
	{
		if (!contains(_set, _value))
		{
			return false;
		}

		uint256 i    = indexOf(_set, _value);
		uint256 last = length(_set);

		if (i != last)
		{
			TYPE_VALUE swapValue = _set.values[last - 1];
			_set.values[i - 1] = swapValue;
			_set.indexes[swapValue] = i;
		}

		delete _set.indexes[_value];
		--_set.values.length;

		return true;
	}

	function clear(set storage _set)
	internal returns (bool)
	{
		for (uint256 i = 0; i < _set.values.length; ++i)
		{
			delete _set.indexes[_set.values[i]];
		}
		_set.values.length = 0;
	}
}
